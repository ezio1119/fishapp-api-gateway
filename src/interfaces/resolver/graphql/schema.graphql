scalar Time

type Query {
  posts(in: GetPostListInput): [Post!]!
  post(id: ID!): Post!
  user(id: ID!): User!
  profile(userID: ID!): Profile!
}

type Mutation {
  createUserProfile(in: CreateUserProfileInput!): UserProfileWithToken!
  deleteUserProfile: Boolean! # Token required
  updateUser(in: UpdateUserInput!): User! # Token required
  login(in: LoginInput!): UserWithToken!
  logout: Boolean! # Refresh token required
  refreshIDToken: TokenPair! # Refresh token required
  updateProfile(in: UpdateProfileInput!): Profile! # Token required 
  createPost(in: CreatePostInput!): Post! # Token required 
  updatePost(in: UpdatePostInput!): Post! # Token required 
  deletePost(id: ID!): Boolean! # Token required
  createEntryPost(post_id: ID!): EntryPost! # Token required
  deleteEntryPost(id: ID!): Boolean! # Token required
  createChatRoom(post_id: ID!): ChatRoom!
  addMemberToChatRoom(in: AddMemberInput!): Member!
  sendMessage(in: SendMessageInput!): Message!
}

type Subscription {
  messageAdded(room_ids: [ID!]!): Message!
}

input SendMessageInput {
  room_id: ID!
  body: String!
}

input AddMemberInput {
  room_id: ID!
}

type ChatRoom {
  id: ID!
  post_id: ID!
  created_at: Time!
  updated_at: Time!
}

type Member {
  id: ID!
  room_id: ID!
  user_id: ID!
}

type Message {
  id: ID!
  body: String!
  room_id: ID!
  user_id: ID!
  created_at: Time!
  updated_at: Time!
}

type User {
  id: ID!
  email: String!
  created_at: Time!
  updated_at: Time!
}

type Profile {
  id: ID!
  name: String!
  user_id: ID!
  user: User!
  created_at: Time!
  updated_at: Time!
}

type EntryPost {
  id: ID!
  user_id: ID!
  post_id: ID!
  profile: Profile!
  post: Post!
  created_at: Time!
  updated_at: Time!
}

type UserWithToken {
  user: User!
  tokenPair: TokenPair!
}

type UserProfileWithToken {
  user: User!
  profile: Profile!
  tokenPair: TokenPair!
}

input UpdateProfileInput {
  name: String!
}

type TokenPair {
  idToken: String!
  refreshToken: String!
}

input CreateUserProfileInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  user_id: ID!
  profile: Profile!
  entries: [EntryPost!]!
  created_at: Time!
  updated_at: Time!
}

input CreatePostInput {
  title: String!
  content: String!
}

input UpdatePostInput{
  id: ID!
  title: String!
  content: String!
}

input GetPostListInput{
  num: Int!
  datetime: Time!
}
