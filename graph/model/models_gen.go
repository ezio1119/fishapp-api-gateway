// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/99designs/gqlgen/graphql"
	"github.com/ezio1119/fishapp-api-gateway/pb"
	"google.golang.org/protobuf/types/known/timestamppb"
)

type CreateApplyPostInput struct {
	PostID int64 `json:"postId"`
}

type CreateApplyPostPayload struct {
	ApplyPost *pb.ApplyPost `json:"applyPost"`
}

type CreateMessageInput struct {
	Body   *string         `json:"body"`
	RoomID int64           `json:"roomId"`
	Image  *graphql.Upload `json:"image"`
}

type CreateMessagePayload struct {
	Message *pb.Message `json:"message"`
}

type CreatePostInput struct {
	Title             string                `json:"title"`
	Content           string                `json:"content"`
	FishingSpotTypeID int64                 `json:"fishingSpotTypeId"`
	FishTypeIds       []int64               `json:"fishTypeIds"`
	PrefectureID      int64                 `json:"prefectureId"`
	MeetingPlaceID    string                `json:"meetingPlaceId"`
	MeetingAt         timestamppb.Timestamp `json:"meetingAt"`
	MaxApply          int64                 `json:"maxApply"`
	Images            []*graphql.Upload     `json:"images"`
}

type CreatePostPayload struct {
	Post   *pb.Post `json:"post"`
	SagaID string   `json:"sagaId"`
}

type CreatePostResultInput struct {
	SagaID string `json:"sagaId"`
}

type CreatePostResultPayload struct {
	Post  *pb.Post `json:"post"`
	Error *string  `json:"error"`
}

type CreateUserInput struct {
	Email        string          `json:"email"`
	Password     string          `json:"password"`
	Name         string          `json:"name"`
	Sex          pb.Sex          `json:"sex"`
	Introduction string          `json:"introduction"`
	Image        *graphql.Upload `json:"image"`
}

type CreateUserPayload struct {
	User      *pb.User      `json:"user"`
	TokenPair *pb.TokenPair `json:"tokenPair"`
}

type DeleteApplyPostInput struct {
	ID int64 `json:"id"`
}

type DeleteApplyPostPayload struct {
	Success bool `json:"success"`
}

type DeletePostInput struct {
	ID int64 `json:"id"`
}

type DeletePostPayload struct {
	Success bool `json:"success"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginPayload struct {
	User      *pb.User      `json:"user"`
	TokenPair *pb.TokenPair `json:"tokenPair"`
}

type LogoutPayload struct {
	Success bool `json:"success"`
}

type MessageAddedInput struct {
	RoomID int64 `json:"roomId"`
}

type MessageAddedPayload struct {
	Message *pb.Message `json:"message"`
}

type PageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	EndCursor   *string `json:"endCursor"`
}

type PostConnection struct {
	PageInfo *PageInfo  `json:"pageInfo"`
	Nodes    []*pb.Post `json:"nodes"`
}

type PostsInput struct {
	PrefectureID      *int64                          `json:"prefectureId"`
	FishingSpotTypeID *int64                          `json:"fishingSpotTypeId"`
	FishTypeIds       []int64                         `json:"fishTypeIds"`
	MeetingAtFrom     *timestamppb.Timestamp          `json:"meetingAtFrom"`
	MeetingAtTo       *timestamppb.Timestamp          `json:"meetingAtTo"`
	CanApply          *bool                           `json:"canApply"`
	OrderBy           *pb.ListPostsReq_Filter_OrderBy `json:"orderBy"`
	SortBy            *pb.ListPostsReq_Filter_SortBy  `json:"sortBy"`
	UserID            *int64                          `json:"userId"`
}

type RefreshIDTokenPayload struct {
	TokenPair *pb.TokenPair `json:"tokenPair"`
}

type UpdatePasswordInput struct {
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type UpdatePasswordPayload struct {
	Success bool `json:"success"`
}

type UpdatePostInput struct {
	ID                int64                 `json:"id"`
	Title             string                `json:"title"`
	Content           string                `json:"content"`
	FishingSpotTypeID int64                 `json:"fishingSpotTypeId"`
	FishTypeIds       []int64               `json:"fishTypeIds"`
	PrefectureID      int64                 `json:"prefectureId"`
	MeetingPlaceID    string                `json:"meetingPlaceId"`
	MeetingAt         timestamppb.Timestamp `json:"meetingAt"`
	MaxApply          int64                 `json:"maxApply"`
	ImageIdsToDelete  []int64               `json:"imageIdsToDelete"`
	Images            []*graphql.Upload     `json:"images"`
}

type UpdatePostPayload struct {
	Post *pb.Post `json:"post"`
}

type UpdateUserInput struct {
	Email        string          `json:"email"`
	Name         string          `json:"name"`
	Introduction string          `json:"introduction"`
	Image        *graphql.Upload `json:"image"`
}

type UpdateUserPayload struct {
	User *pb.User `json:"user"`
}
